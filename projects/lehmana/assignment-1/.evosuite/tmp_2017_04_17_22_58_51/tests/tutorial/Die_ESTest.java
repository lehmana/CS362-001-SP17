/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 18 06:00:08 GMT 2017
 */

package tutorial;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;
import tutorial.Die;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Die_ESTest extends Die_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die(710);
      boolean boolean0 = die0.equals(die1);
      assertFalse(boolean0);
      assertEquals(710, die1.getNumSides());
      assertFalse(die1.equals((Object)die0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die(710, 710);
      boolean boolean0 = die0.equals(die1);
      assertEquals(710, die1.getNumSides());
      assertEquals(710, die1.getResult());
      assertEquals(6, die0.getNumSides());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Random.setNextRandom((-371));
      Die die0 = new Die();
      int int0 = die0.roll();
      assertEquals(6, die0.getResult());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Die die0 = new Die(2);
      die0.getResult();
      assertEquals(2, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Die die0 = new Die(2);
      int int0 = die0.getNumSides();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Die die0 = new Die();
      Die die1 = new Die();
      boolean boolean0 = die1.equals(die0);
      assertTrue(boolean0);
      assertEquals(6, die1.getNumSides());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Die die0 = new Die(2814);
      Die die1 = new Die();
      boolean boolean0 = die0.equals(die1);
      assertEquals(6, die1.getNumSides());
      assertFalse(die1.equals((Object)die0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Die die0 = new Die();
      Object object0 = new Object();
      boolean boolean0 = die0.equals(object0);
      assertFalse(boolean0);
      assertEquals(6, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Random.setNextRandom(33);
      Die die0 = new Die();
      Die die1 = new Die();
      die0.roll();
      boolean boolean0 = die0.equals(die1);
      assertEquals(4, die0.getResult());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Die die0 = new Die();
      boolean boolean0 = die0.equals((Object) null);
      assertEquals(6, die0.getNumSides());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Die die0 = new Die(1710);
      int int0 = die0.roll();
      assertEquals(1, int0);
      assertEquals(1710, die0.getNumSides());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(1906, 2743);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Die die0 = new Die(1906, 1);
      assertEquals(1906, die0.getNumSides());
      assertEquals(1, die0.getResult());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die((-371), 6);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(1581, (-626));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Die die0 = null;
      try {
        die0 = new Die(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // Violation of precondition: numSides = 1numSides must be greater than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Die die0 = new Die(1710);
      String string0 = die0.toString();
      assertEquals("Num sides 1710 result 1", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Die die0 = new Die();
      boolean boolean0 = die0.equals(die0);
      assertEquals(6, die0.getNumSides());
      assertTrue(boolean0);
  }
}
